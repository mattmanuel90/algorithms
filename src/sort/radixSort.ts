const getDigit = (number: number, nth: number): number => {  let ret = 0;  while (nth--) {    ret = number % 10;    number = Math.floor((number - ret) / 10);  }  return ret;};export const radixSort = (array: number[]): number[] => {  array = array.slice();  const max = Math.floor(Math.log10(Math.max.apply(Math, array)));  var digitBuckets = [];  var idx = 0;  //need to get the length of digits  for (let i = 0; i < max + 1; i++) {    digitBuckets = [];    for (var j = 0; j < array.length; j++) {      let digit = getDigit(array[j], i + 1);      digitBuckets[digit] = digitBuckets[digit] || [];      digitBuckets[digit].push(array[j]);    }    idx = 0;    for (let t = 0; t < digitBuckets.length; t++) {      if (digitBuckets[t] && digitBuckets[t].length > 0) {        for (j = 0; j < digitBuckets[t].length; j++) {          array[idx++] = digitBuckets[t][j];        }      }    }  }  return array;};